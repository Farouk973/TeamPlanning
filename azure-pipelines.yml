# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'develop'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '14.x'
  displayName: 'Install Node.js'

- task: Npm@1
  inputs:
    command: 'install'
    workingDir: ''
  displayName: 'Install npm packages'

- task: SonarQubePrepare@4
  inputs:
    SonarQube: 'f204c828-52c3-4d3a-90eb-d85ea6a5992b'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'NXM_-_Tensai_-_Team_Planning_NXM.TeamPlanning.Front_AYbnoJVviwrWHBjyIvwd'
    cliProjectName: 'NXM.TeamPlanning.Front'
    cliSources: 'src'

- task: AngularCLI@1
  displayName: ng build
  inputs:
    project: src
    prod: false

- task: SonarQubeAnalyze@4
  displayName: 'Run SonarQube analysis'
  inputs:
    SonarQube: 'f204c828-52c3-4d3a-90eb-d85ea6a5992b'

- task: SonarQubePublish@4
  displayName: 'Publish SonarQube analysis'
  inputs:
    pollingTimeoutSec: '300'

- task: Docker@2
  displayName: 'Build and push image'
  inputs:
    containerRegistry: 'a9939786-a2e4-4cfa-a2a7-449abb04083d'
    repository: '$(imageRepository):$(Build.BuildId)'
    command: 'buildAndPush'
    Dockerfile: 'Dockerfile'
    tags: |
      $(Build.BuildId)

- task: Kubernetes@1
  displayName: 'Deploy to AKS'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'AksTensainNXM'
    command: 'apply'
    useConfigurationFile: true
    configuration: '$(System.DefaultWorkingDirectory)/k8s-manifests/*.yaml'
